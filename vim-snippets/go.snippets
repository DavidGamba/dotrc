snippet new
package main

import (
	"context"
	"fmt"
	"io"
	"log"
	"os"

	"github.com/DavidGamba/go-getoptions"
)

var Logger = log.New(io.Discard, "", log.LstdFlags)

func main() {
	os.Exit(program(os.Args))
}

func program(args []string) int {
	opt := getoptions.New()
	opt.Bool("help", false, opt.Alias("?"))
	opt.Bool("debug", false, opt.GetEnv("DEBUG"))
	remaining, err := opt.Parse(args[1:])
	if opt.Called("help") {
		fmt.Println(opt.Help())
		return 1
	}
	if err != nil {
		fmt.Fprintf(os.Stderr, "ERROR: %s\n", err)
		return 1
	}
	if opt.Called("debug") {
		Logger.SetOutput(os.Stderr)
	}
	Logger.Println(remaining)

	ctx, cancel, done := getoptions.InterruptContext()
	defer func() { cancel(); <-done }()

	err = run(ctx)
	if err != nil {
		fmt.Fprintf(os.Stderr, "ERROR: %s\n", err)
		return 1
	}
	return 0
}

func run(ctx context.Context) error {
	return nil
}
endsnippet

snippet newquiet
package main

import (
	"context"
	"fmt"
	"io"
	"log"
	"os"

	"github.com/DavidGamba/go-getoptions"
)

var Logger = log.New(os.Stderr, "", log.LstdFlags)

func main() {
	os.Exit(program(os.Args))
}

func program(args []string) int {
	opt := getoptions.New()
	opt.Bool("help", false, opt.Alias("?"))
	opt.Bool("quiet", false)
	remaining, err := opt.Parse(args[1:])
	if opt.Called("help") {
		fmt.Println(opt.Help())
		return 1
	}
	if err != nil {
		fmt.Fprintf(os.Stderr, "ERROR: %s\n", err)
		return 1
	}
	if opt.Called("quiet") {
		Logger.SetOutput(io.Discard)
	}
	Logger.Println(remaining)

	ctx, cancel, done := getoptions.InterruptContext()
	defer func() { cancel(); <-done }()

	err = run(ctx)
	if err != nil {
		fmt.Fprintf(os.Stderr, "ERROR: %s\n", err)
		return 1
	}
	return 0
}

func run(ctx context.Context) error {
	return nil
}
endsnippet

snippet newcmd
package main

import (
	"context"
	"errors"
	"fmt"
	"io"
	"log"
	"os"

	"github.com/DavidGamba/go-getoptions"
)

var Logger = log.New(io.Discard, "", log.LstdFlags)

func main() {
	os.Exit(program(os.Args))
}

func program(args []string) int {
	opt := getoptions.New()
	opt.Bool("debug", false, opt.GetEnv("DEBUG"))
	opt.SetUnknownMode(getoptions.Pass)
	opt.NewCommand("cmd", "description").SetCommandFn(Run)
	opt.HelpCommand("help", opt.Alias("?"))
	remaining, err := opt.Parse(args[1:])
	if err != nil {
		fmt.Fprintf(os.Stderr, "ERROR: %s\n", err)
		return 1
	}
	if opt.Called("debug") {
		Logger.SetOutput(os.Stderr)
	}
	Logger.Println(remaining)

	ctx, cancel, done := getoptions.InterruptContext()
	defer func() { cancel(); <-done }()

	err = opt.Dispatch(ctx, remaining)
	if err != nil {
		if errors.Is(err, getoptions.ErrorHelpCalled) {
			return 1
		}
		fmt.Fprintf(os.Stderr, "ERROR: %s\n", err)
		return 1
	}
	return 0
}

func Run(ctx context.Context, opt *getoptions.GetOpt, args []string) error {
	Logger.Printf("Running")
	return nil
}
endsnippet

snippet dispatch
	ctx, cancel, done := opt.InterruptContext()
	defer func() { cancel(); <-done }()

	err = opt.Dispatch(ctx, "help", remaining)
	if err != nil {
		if errors.Is(err, getoptions.ErrorHelpCalled) {
			return 1
		}
		fmt.Fprintf(os.Stderr, "ERROR: %s\n", err)
		return 1
	}
	return 0
endsnippet

snippet command
// ${1:command} -
func $1(ctx context.Context, opt *getoptions.GetOpt, args []string) error {
	Logger.Printf("$1")
	$0
	return nil
}
endsnippet


snippet ife
if err != nil {
	return fmt.Errorf("${1:reason}: %w", err)
}
$0
endsnippet

snippet open
${1:fh}, err := os.Open($2)
if err != nil {
	${3:return err}
}
$0
endsnippet

snippet read
${1:fs}, err := ioutil.ReadFile($2)
if err != nil {
	${3:return err}
}
$0
endsnippet

snippet checkFile
if _, err := os.Stat($1); os.IsNotExist(err) {
  ${2:// file does not exist}
	$0
}
endsnippet

snippet testtable
tests := []struct {
	name string
	$0
}{}
for _, test := range tests {
	t.Run(test.name, func(t *testing.T) {
	})
}
endsnippet

snippet trun
	t.Run("$0", func(t *testing.T) {
	})
endsnippet

snippet iota
const (
  A = iota
	B
	C
)
endsnippet
